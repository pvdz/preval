// TOFIX regressions:

// tests/cases/import/import_default_named_class.md -> ref tracking: exported let/const decls should get the same treatment as escaping closures (read any write)
// tests/cases/bit_hacks/if_return_bit/base_16.md -> regressed when restoring options to phase3, so must be loop unroll related? before it would end with $(b)

// TODO:

// tests/cases/normalize/dce/return/decl_after_looped_infi.md -> when a branch exits the loop we could replace it with a break and move the branch to after the loop? but I guess only if there are no other breaks. maybe too edge casy
// tests/cases/tofix/infinite_loops2.md -> while with nested while (nothing else in root body) could eliminate outer while by compiling breaks like you do for continue
// tests/cases/while/unobservable_ops_global.md -> `s |= 10` when `s` is not observable inside the loop nor escapes, is going to do the same thing no matter how often you do it
// is while-rotating sound when the body breaks more than once?
// infinite loop tests are set to $LOOP_DONE_UNROLLING_ALWAYS_TRUE in reduce_static/infinite_loops.mjs but we should find a way in normalize instead
// tests/cases/array/read_only/computed_prop.md -> we should be able to resolve array props until it escapes. especially when its not a closure.
// tests/cases/normalize/expressions/statement/while/auto_ident_logic_or_or.md -> if a var declared above a label that doesnt escape is only used inside that label then it can be moved inside too, same rule as in the end of transformLabeledStatement but it needs to be phase2 due to scope tracking
// tests/cases/normalize/expressions/assignments/for_b/auto_ident_nested_simple_member_assigns.md -> collapse object prop assignments when we know its a literal (we assume builtins are sound)
// Support async and generator functions in inlineSimpleFuncCalls / reduce_static/simple_funcs.mjs
// tests/cases/import/import_default_named_class.md -> why is x an implicit global?
// Detect $forOf loops and unroll them when we know the values to be iterated over. Will need to replace calls to gen.next() with some kind of symbol to "remember" the index pointer of the generator. Much harder to do for-in keys unfortunately.
// Maybe try to unroll $forIn under risky rules? The order may not be guaranteed but that also means we can do whatever we want with that order as long as it is consistent.
// Apply type analysis for our $forIn and $forOf symbols
// Consider whether tests/cases/regex/dotcall/simple.md should be allowed to inline the regex as the callee or smth
// when a function does not use _this_ and is used in a $dotCall and we know which function it is, we dont need the dotcall
// convert array.map etc to while loops using $forOf when we know the context is an array literal of sorts
// Calling ! on a value known to be Boolean(x) should do !x directly because neither operation is observable at all. Normalization has a simple rule for this implemented that only looks at the previous statement (to eliminate a transform artifact).
// What about type assertions for params in a function header? `function f($$1) { const a = String($$1);` (or smth like $isString()) to indicate that we know the value of a will be a string. And if this param becomes unused, we would not keep this usage around, for all intentions and purposes it's a noop.
// Think some more about how to deal with optional chaining cases: tests/cases/normalize/optional/func_nested_var.md
// PRNG math.random() round() trick -> tests/cases/math_random/floor_trick/rng3.md
// tests/cases/normalize/expressions/assignments/computed_prop_prop/auto_pattern_arr_c-seq.md we know the obj has no side effects so the member-expression-statement can be dropped safely
// tests/cases/normalize/expressions/assignments/compound/auto_ident_c-opt_complex_complex_c-opt_complex_complex.md doesnt tmpClusterSSA_a invariably get NaN assigned ? We can resolve that.
// investigate return elimination... `return x` -> `let $r; $ret: { $r = x; break $ret; } return $r;`
// add array type to meta.typing?
// rename constValueRef to varDeclInitRef, and containerParent should be containerBlock to be more consistent with the rest
// convert -Infinity to $Number_NEGATIVE_INFINITY and treat it as a built-in. Consider doing the same for NaN and Infinity.
// We should make an effort not to inline floats and other dangerous numbers
// tests/cases/array/static_props/method_call_call_unknown.md doing a .call on a builtin? surely we can catch a few of these cases
// When assigning a const to another const and we already know the type, we can copy the type safely since the binding itself cannot mutate. const numbers cant suddenly become bools.
// Math.exp(0) is 1
// Doing string operations on templates when we know the result regardless of the template dynamic expression, we should support that -> `x{y}`.charAt(0) => 'x' in any world
// Return of a $frfr should be considered a primitive if nothing better? And consider to never upgrade that to object/array/regex/etc?
// If a $free is only called once and the $frfr passes on primitives then we can propagate and resolve them in the func
// Do we want to eliminate regex literals in favor of strings? this would allow us to bundle up trivial .replace calls, for example. more involved regex usages can still use dynamic compilation. same end result.
// tests/cases/normalize/expressions/assignments/template/auto_ident_delete_prop_c-seq.md -> in this case we do know the outcome of `delete`
// when the switch case is "simple" (no fall-through, default in last position or not at all) we can apply a simpler transform. this is likely to cover many/most cases?
// rename `AST.isPrimitive` to `AST.isPrimitiveValue` or something? objPatternRest -> $objRest, tmpClusterSSA -> ssa
// I added an option for considering function statements as decls but i should make that a proper option
// denorm could check if ssa_ prefixed vars have no unprefixed counterparts anymore and revert their name to it in that case (same for others)
// PST printing 1.x wrong, needs parens or double dot

tests/cases/function_statements/dropping_the_d_func.md
tests/cases/free/free_loops/gambling.md



tests/cases/binary/neq_weak/diff_objs.md
-$(true);
+const tmpBinBothLhs /*:object*/ = {};
+const tmpBinBothRhs /*:object*/ = {};
+const tmpCalleeParam /*:boolean*/ = tmpBinBothLhs != tmpBinBothRhs;
+$(tmpCalleeParam);

ternaryConst annotated test cases might have something interesting to build out
we should have an `innerLabel`, like innerLoop etc. we should update cases that refer to innerLoop because in most of those cases it's about getting certainty about something and label-break is another form of not executing a certain branch of code.
