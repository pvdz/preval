import { symbo } from '../src/symbols_builtins.mjs';

export function createBuiltinSymbolGlobals() {

  const builtinSymbolsMapper = {
    // These first ones should be overridden by a test runner that would allow them
    [symbo('console', 'log')]: () => { throw new Error('test attempted poisoned access to: ' + symbo('console', 'log')); },
    [symbo('console', 'warn')]: () => { throw new Error('test attempted poisoned access to: ' + symbo('console', 'warn')); },
    [symbo('console', 'error')]: () => { throw new Error('test attempted poisoned access to: ' + symbo('console', 'error')); },
    [symbo('console', 'dir')]: () => { throw new Error('test attempted poisoned access to: ' + symbo('console', 'dir')); },
    [symbo('console', 'debug')]: () => { throw new Error('test attempted poisoned access to: ' + symbo('console', 'debug')); },
    [symbo('console', 'time')]: () => { throw new Error('test attempted poisoned access to: ' + symbo('console', 'time')); },
    [symbo('console', 'timeEnd')]: () => { throw new Error('test attempted poisoned access to: ' + symbo('console', 'timeEnd')); },
    [symbo('console', 'group')]: () => { throw new Error('test attempted poisoned access to: ' + symbo('console', 'group')); },
    [symbo('console', 'groupEnd')]: () => { throw new Error('test attempted poisoned access to: ' + symbo('console', 'groupEnd')); },
    [symbo('console', 'trace')]: () => { throw new Error('test attempted poisoned access to: ' + symbo('console', 'trace')); },
    [symbo('console', 'traceEnd')]: () => { throw new Error('test attempted poisoned access to: ' + symbo('console', 'traceEnd')); },

    [symbo('Array', 'isArray')]: Array.isArray,
    [symbo('Array', 'from')]: Array.from,
    [symbo('Array', 'fromAsync')]: Array.fromAsync,
    [symbo('Array', 'of')]: Array.of,
    [symbo('Array', 'prototype')]: Array.prototype,
    [symbo('array', 'at')]: Array.prototype.at,
    [symbo('array', 'concat')]: Array.prototype.concat,
    [symbo('array', 'constructor')]: Array.prototype.constructor,
    [symbo('array', 'copyWithin')]: Array.prototype.copyWithin,
    [symbo('array', 'entries')]: Array.prototype.entries,
    [symbo('array', 'every')]: Array.prototype.every,
    [symbo('array', 'fill')]: Array.prototype.fill,
    [symbo('array', 'filter')]: Array.prototype.filter,
    [symbo('array', 'find')]: Array.prototype.find,
    [symbo('array', 'findIndex')]: Array.prototype.findIndex,
    [symbo('array', 'findLast')]: Array.prototype.findLast,
    [symbo('array', 'findLastIndex')]: Array.prototype.findLastIndex,
    [symbo('array', 'flat')]: Array.prototype.flat,
    [symbo('array', 'flatMap')]: Array.prototype.flatMap,
    [symbo('array', 'forEach')]: Array.prototype.forEach,
    [symbo('array', 'includes')]: Array.prototype.includes,
    [symbo('array', 'indexOf')]: Array.prototype.indexOf,
    [symbo('array', 'join')]: Array.prototype.join,
    [symbo('array', 'keys')]: Array.prototype.keys,
    [symbo('array', 'lastIndexOf')]: Array.prototype.lastIndexOf,
    [symbo('array', 'map')]: Array.prototype.map,
    [symbo('array', 'pop')]: Array.prototype.pop,
    [symbo('array', 'push')]: Array.prototype.push,
    [symbo('array', 'reduce')]: Array.prototype.reduce,
    [symbo('array', 'reduceRight')]: Array.prototype.reduceRight,
    [symbo('array', 'reverse')]: Array.prototype.reverse,
    [symbo('array', 'shift')]: Array.prototype.shift,
    [symbo('array', 'slice')]: Array.prototype.slice,
    [symbo('array', 'some')]: Array.prototype.some,
    [symbo('array', 'splice')]: Array.prototype.splice,
    [symbo('array', 'sort')]: Array.prototype.sort,
    [symbo('array', 'toLocaleString')]: Array.prototype.toLocaleString,
    [symbo('array', 'toReversed')]: Array.prototype.toReversed,
    [symbo('array', 'toSorted')]: Array.prototype.toSorted,
    [symbo('array', 'toSpliced')]: Array.prototype.toSpliced,
    [symbo('array', 'toString')]: Array.prototype.toString,
    [symbo('array', 'unshift')]: Array.prototype.unshift,
    [symbo('array', 'values')]: Array.prototype.values,
    [symbo('array', 'with')]: Array.prototype.with,

    [symbo('Boolean', 'prototype')]: Boolean.prototype,
    [symbo('boolean', 'constructor')]: Boolean.prototype.constructor,
    [symbo('boolean', 'toString')]: Boolean.prototype.toString,
    [symbo('boolean', 'valueOf')]: Boolean.prototype.valueOf,

    [symbo('Function', 'prototype')]: Function.prototype,
    [symbo('function', 'constructor')]: Function.prototype.constructor,
    [symbo('function', 'apply')]: Function.prototype.apply,
    [symbo('function', 'call')]: Function.prototype.call,
    [symbo('function', 'bind')]: Function.prototype.bind,
    [symbo('function', 'toString')]: Function.prototype.toString,

    [symbo('Number', 'EPSILON')]: Number.EPSILON,
    [symbo('Number', 'MAX_SAFE_INTEGER')]: Number.MAX_SAFE_INTEGER,
    [symbo('Number', 'MIN_SAFE_INTEGER')]: Number.MIN_SAFE_INTEGER,
    [symbo('Number', 'MAX_VALUE')]: Number.MAX_VALUE,
    [symbo('Number', 'MIN_VALUE')]: Number.MIN_VALUE,
    [symbo('Number', 'NaN')]: Number.NaN,
    [symbo('Number', 'NEGATIVE_INFINITY')]: Number.NEGATIVE_INFINITY,
    [symbo('Number', 'POSITIVE_INFINITY')]: Number.POSITIVE_INFINITY,
    [symbo('Number', 'isFinite')]: Number.isFinite,
    [symbo('Number', 'isInteger')]: Number.isInteger,
    [symbo('Number', 'isNaN')]: Number.isNaN,
    [symbo('Number', 'isSafeInteger')]: Number.isSafeInteger,
    [symbo('Number', 'parseFloat')]: Number.parseFloat,
    [symbo('Number', 'parseInt')]: Number.parseInt,
    [symbo('Number', 'prototype')]: Number.prototype,
    [symbo('number', 'constructor')]: Number.prototype.constructor,
    [symbo('number', 'toExponential')]: Number.prototype.toExponential,
    [symbo('number', 'toFixed')]: Number.prototype.toFixed,
    [symbo('number', 'toLocaleString')]: Number.prototype.toLocaleString,
    [symbo('number', 'toPrecision')]: Number.prototype.toPrecision,
    [symbo('number', 'toString')]: Number.prototype.toString,
    [symbo('number', 'valueOf')]: Number.prototype.valueOf,

    [symbo('Object', 'assign')]: Object.assign,
    [symbo('Object', 'create')]: Object.create,
    [symbo('Object', 'defineProperty')]: Object.defineProperty,
    [symbo('Object', 'defineProperties')]: Object.defineProperties,
    [symbo('Object', 'entries')]: Object.entries,
    [symbo('Object', 'freeze')]: Object.freeze,
    [symbo('Object', 'fromEntries')]: Object.fromEntries,
    [symbo('Object', 'getOwnPropertyDescriptor')]: Object.getOwnPropertyDescriptor,
    [symbo('Object', 'getOwnPropertyDescriptors')]: Object.getOwnPropertyDescriptors,
    [symbo('Object', 'getOwnPropertyNames')]: Object.getOwnPropertyNames,
    [symbo('Object', 'getOwnPropertySymbols')]: Object.getOwnPropertySymbols,
    [symbo('Object', 'getPrototypeOf')]: Object.getPrototypeOf,
    [symbo('Object', 'groupBy')]: Object.groupBy,
    [symbo('Object', 'hasOwn')]: Object.hasOwn,
    [symbo('Object', 'is')]: Object.is,
    [symbo('Object', 'isExtensible')]: Object.isExtensible,
    [symbo('Object', 'isFrozen')]: Object.isFrozen,
    [symbo('Object', 'isSealed')]: Object.isSealed,
    [symbo('Object', 'keys')]: Object.keys,
    [symbo('Object', 'preventExtensions')]: Object.preventExtensions,
    [symbo('Object', 'seal')]: Object.seal,
    [symbo('Object', 'setPrototypeOf')]: Object.setPrototypeOf,
    [symbo('Object', 'values')]: Object.values,
    [symbo('Object', 'prototype')]: Object.prototype,
    [symbo('object', 'constructor')]: Object.prototype.constructor,
    [symbo('object', 'hasOwnProperty')]: Object.prototype.hasOwnProperty,
    [symbo('object', 'isPrototypeOf')]: Object.prototype.isPrototypeOf,
    [symbo('object', 'propertyIsEnumerable')]: Object.prototype.propertyIsEnumerable,
    [symbo('object', 'toLocaleString')]: Object.prototype.toLocaleString,
    [symbo('object', 'toString')]: Object.prototype.toString,
    [symbo('object', 'valueOf')]: Object.prototype.valueOf,

    [symbo('RegExp', 'escape')]: RegExp.escape,
    [symbo('RegExp', 'prototype')]: RegExp.prototype,
    [symbo('regex', 'constructor')]: RegExp.prototype.constructor,
    [symbo('regex', 'exec')]: RegExp.prototype.exec,
    [symbo('regex', 'test')]: RegExp.prototype.test,
    [symbo('regex', 'toString')]: RegExp.prototype.toString,

    [symbo('String', 'fromCharCode')]: String.fromCharCode,
    [symbo('String', 'fromCodePoint')]: String.fromCodePoint,
    [symbo('String', 'raw')]: String.raw,
    [symbo('String', 'prototype')]: String.prototype,
    [symbo('string', 'at')]: String.prototype.at,
    [symbo('string', 'charAt')]: String.prototype.charAt,
    [symbo('string', 'charCodeAt')]: String.prototype.charCodeAt,
    [symbo('string', 'constructor')]: String.prototype.constructor,
    [symbo('string', 'concat')]: String.prototype.concat,
    [symbo('string', 'endsWith')]: String.prototype.endsWith,
    [symbo('string', 'includes')]: String.prototype.includes,
    [symbo('string', 'indexOf')]: String.prototype.indexOf,
    [symbo('string', 'isWellFormed')]: String.prototype.isWellFormed,
    [symbo('string', 'lastIndexOf')]: String.prototype.lastIndexOf,
    [symbo('string', 'localeCompare')]: String.prototype.localeCompare,
    [symbo('string', 'match')]: String.prototype.match,
    [symbo('string', 'matchAll')]: String.prototype.matchAll,
    [symbo('string', 'normalize')]: String.prototype.normalize,
    [symbo('string', 'padEnd')]: String.prototype.padEnd,
    [symbo('string', 'padStart')]: String.prototype.padStart,
    [symbo('string', 'repeat')]: String.prototype.repeat,
    [symbo('string', 'replace')]: String.prototype.replace,
    [symbo('string', 'replaceAll')]: String.prototype.replaceAll,
    [symbo('string', 'search')]: String.prototype.search,
    [symbo('string', 'slice')]: String.prototype.slice,
    [symbo('string', 'split')]: String.prototype.split,
    [symbo('string', 'startsWith')]: String.prototype.startsWith,
    [symbo('string', 'substring')]: String.prototype.substring,
    [symbo('string', 'substr')]: String.prototype.substr,
    [symbo('string', 'toString')]: String.prototype.toString,
    [symbo('string', 'toLocaleLowerCase')]: String.prototype.toLocaleLowerCase,
    [symbo('string', 'toLocaleUpperCase')]: String.prototype.toLocaleUpperCase,
    [symbo('string', 'toLowerCase')]: String.prototype.toLowerCase,
    [symbo('string', 'toUpperCase')]: String.prototype.toUpperCase,
    [symbo('string', 'toWellFormed')]: String.prototype.toWellFormed,
    [symbo('string', 'trim')]: String.prototype.trim,
    [symbo('string', 'trimEnd')]: String.prototype.trimEnd,
    [symbo('string', 'trimStart')]: String.prototype.trimStart,
    [symbo('string', 'valueOf')]: String.prototype.valueOf,

    // HTML string methods
    [symbo('string', 'anchor')]: String.prototype.anchor,
    [symbo('string', 'big')]: String.prototype.big,
    [symbo('string', 'blink')]: String.prototype.blink,
    [symbo('string', 'bold')]: String.prototype.bold,
    [symbo('string', 'fixed')]: String.prototype.fixed,
    [symbo('string', 'fontcolor')]: String.prototype.fontcolor,
    [symbo('string', 'fontsize')]: String.prototype.fontsize,
    [symbo('string', 'italics')]: String.prototype.italics,
    [symbo('string', 'link')]: String.prototype.link,
    [symbo('string', 'small')]: String.prototype.small,
    [symbo('string', 'strike')]: String.prototype.strike,
    [symbo('string', 'sub')]: String.prototype.sub,
    [symbo('string', 'sup')]: String.prototype.sup,

    [symbo('Date', 'now')]: Date.now,
    [symbo('Date', 'parse')]: Date.parse,
    [symbo('Date', 'UTC')]: Date.UTC,
    [symbo('Date', 'prototype')]: Date.prototype,
    [symbo('date', 'constructor')]: Date.prototype.constructor,
    [symbo('date', 'getDate')]: Date.prototype.getDate,
    [symbo('date', 'getDay')]: Date.prototype.getDay,
    [symbo('date', 'getFullYear')]: Date.prototype.getFullYear,
    [symbo('date', 'getHours')]: Date.prototype.getHours,
    [symbo('date', 'getMilliseconds')]: Date.prototype.getMilliseconds,
    [symbo('date', 'getMinutes')]: Date.prototype.getMinutes,
    [symbo('date', 'getMonth')]: Date.prototype.getMonth,
    [symbo('date', 'getSeconds')]: Date.prototype.getSeconds,
    [symbo('date', 'getTime')]: Date.prototype.getTime,
    [symbo('date', 'getTimezoneOffset')]: Date.prototype.getTimezoneOffset,
    [symbo('date', 'getUTCDate')]: Date.prototype.getUTCDate,
    [symbo('date', 'getUTCDay')]: Date.prototype.getUTCDay,
    [symbo('date', 'getUTCFullYear')]: Date.prototype.getUTCFullYear,
    [symbo('date', 'getUTCHours')]: Date.prototype.getUTCHours,
    [symbo('date', 'getUTCMilliseconds')]: Date.prototype.getUTCMilliseconds,
    [symbo('date', 'getUTCMinutes')]: Date.prototype.getUTCMinutes,
    [symbo('date', 'getUTCMonth')]: Date.prototype.getUTCMonth,
    [symbo('date', 'getUTCSeconds')]: Date.prototype.getUTCSeconds,
    [symbo('date', 'setDate')]: Date.prototype.setDate,
    [symbo('date', 'setFullYear')]: Date.prototype.setFullYear,
    [symbo('date', 'setHours')]: Date.prototype.setHours,
    [symbo('date', 'setMilliseconds')]: Date.prototype.setMilliseconds,
    [symbo('date', 'setMinutes')]: Date.prototype.setMinutes,
    [symbo('date', 'setMonth')]: Date.prototype.setMonth,
    [symbo('date', 'setSeconds')]: Date.prototype.setSeconds,
    [symbo('date', 'setTime')]: Date.prototype.setTime,
    [symbo('date', 'setUTCDate')]: Date.prototype.setUTCDate,
    [symbo('date', 'setUTCFullYear')]: Date.prototype.setUTCFullYear,
    [symbo('date', 'setUTCHours')]: Date.prototype.setUTCHours,
    [symbo('date', 'setUTCMilliseconds')]: Date.prototype.setUTCMilliseconds,
    [symbo('date', 'setUTCMinutes')]: Date.prototype.setUTCMinutes,
    [symbo('date', 'setUTCMonth')]: Date.prototype.setUTCMonth,
    [symbo('date', 'setUTCSeconds')]: Date.prototype.setUTCSeconds,
    [symbo('date', 'toDateString')]: Date.prototype.toDateString,
    [symbo('date', 'toISOString')]: Date.prototype.toISOString,
    [symbo('date', 'toJSON')]: Date.prototype.toJSON,
    [symbo('date', 'toLocaleDateString')]: Date.prototype.toLocaleDateString,
    [symbo('date', 'toLocaleString')]: Date.prototype.toLocaleString,
    [symbo('date', 'toLocaleTimeString')]: Date.prototype.toLocaleTimeString,
    [symbo('date', 'toString')]: Date.prototype.toString,
    [symbo('date', 'toTimeString')]: Date.prototype.toTimeString,
    [symbo('date', 'toUTCString')]: Date.prototype.toUTCString,
    [symbo('date', 'valueOf')]: Date.prototype.valueOf,

    [symbo('Math', 'abs')]: Math.abs,
    [symbo('Math', 'acos')]: Math.acos,
    [symbo('Math', 'acosh')]: Math.acosh,
    [symbo('Math', 'asin')]: Math.asin,
    [symbo('Math', 'asinh')]: Math.asinh,
    [symbo('Math', 'atan')]: Math.atan,
    [symbo('Math', 'atan2')]: Math.atan2,
    [symbo('Math', 'atanh')]: Math.atanh,
    [symbo('Math', 'cbrt')]: Math.cbrt,
    [symbo('Math', 'ceil')]: Math.ceil,
    [symbo('Math', 'clz32')]: Math.clz32,
    [symbo('Math', 'cos')]: Math.cos,
    [symbo('Math', 'cosh')]: Math.cosh,
    [symbo('Math', 'exp')]: Math.exp,
    [symbo('Math', 'expm1')]: Math.expm1,
    [symbo('Math', 'floor')]: Math.floor,
    [symbo('Math', 'f16round')]: Math.f16round,
    [symbo('Math', 'fround')]: Math.fround,
    [symbo('Math', 'hypot')]: Math.hypot,
    [symbo('Math', 'imul')]: Math.imul,
    [symbo('Math', 'log')]: Math.log,
    [symbo('Math', 'log10')]: Math.log10,
    [symbo('Math', 'log1p')]: Math.log1p,
    [symbo('Math', 'log2')]: Math.log2,
    [symbo('Math', 'max')]: Math.max,
    [symbo('Math', 'min')]: Math.min,
    [symbo('Math', 'pow')]: Math.pow,
    [symbo('Math', 'random')]: () => { throw new Error('implement me Math.random on the test side'); },
    [symbo('Math', 'round')]: Math.round,
    [symbo('Math', 'sign')]: Math.sign,
    [symbo('Math', 'sin')]: Math.sin,
    [symbo('Math', 'sinh')]: Math.sinh,
    [symbo('Math', 'sqrt')]: Math.sqrt,
    [symbo('Math', 'tan')]: Math.tan,
    [symbo('Math', 'tanh')]: Math.tanh,
    [symbo('Math', 'trunc')]: Math.trunc,
    [symbo('Math', 'E')]: Math.E,
    [symbo('Math', 'LN10')]: Math.LN10,
    [symbo('Math', 'LN2')]: Math.LN2,
    [symbo('Math', 'LOG10E')]: Math.LOG10E,
    [symbo('Math', 'LOG2E')]: Math.LOG2E,
    [symbo('Math', 'PI')]: Math.PI,
    [symbo('Math', 'SQRT1_2')]: Math.SQRT1_2,
    [symbo('Math', 'SQRT2')]: Math.SQRT2,

    [symbo('JSON', 'parse')]: JSON.parse,
    [symbo('JSON', 'stringify')]: JSON.stringify,

    [symbo('Promise', 'prototype')]: Promise.prototype,
    [symbo('Promise', 'all')]: Promise.all,
    [symbo('Promise', 'allSettled')]: Promise.allSettled,
    [symbo('Promise', 'any')]: Promise.any,
    [symbo('Promise', 'race')]: Promise.race,
    [symbo('Promise', 'reject')]: Promise.reject,
    [symbo('Promise', 'resolve')]: Promise.resolve,
    [symbo('Promise', 'try')]: Promise.try,
    [symbo('Promise', 'withResolvers')]: Promise.withResolvers,
    [symbo('promise', 'catch')]: Promise.prototype.catch,
    [symbo('promise', 'constructor')]: Promise.prototype.constructor,
    [symbo('promise', 'finally')]: Promise.prototype.finally,
    [symbo('promise', 'then')]: Promise.prototype.then,

    [symbo('Map', 'prototype')]: Map.prototype,
    [symbo('Map', 'groupBy')]: Map.groupBy,
    [symbo('map', 'clear')]: Map.prototype.clear,
    [symbo('map', 'constructor')]: Map.prototype.constructor,
    [symbo('map', 'delete')]: Map.prototype.delete,
    [symbo('map', 'entries')]: Map.prototype.entries,
    [symbo('map', 'forEach')]: Map.prototype.forEach,
    [symbo('map', 'get')]: Map.prototype.get,
    [symbo('map', 'has')]: Map.prototype.has,
    [symbo('map', 'keys')]: Map.prototype.keys,
    [symbo('map', 'set')]: Map.prototype.set,
    [symbo('map', 'values')]: Map.prototype.values,

    [symbo('Set', 'prototype')]: Set.prototype,
    [symbo('set', 'add')]: Set.prototype.add,
    [symbo('set', 'constructor')]: Set.prototype.constructor,
    [symbo('set', 'clear')]: Set.prototype.clear,
    [symbo('set', 'delete')]: Set.prototype.delete,
    [symbo('set', 'difference')]: Set.prototype.difference,
    [symbo('set', 'entries')]: Set.prototype.entries,
    [symbo('set', 'forEach')]: Set.prototype.forEach,
    [symbo('set', 'has')]: Set.prototype.has,
    [symbo('set', 'intersection')]: Set.prototype.intersection,
    [symbo('set', 'isDisjointFrom')]: Set.prototype.isDisjointFrom,
    [symbo('set', 'isSubsetOf')]: Set.prototype.isSubsetOf,
    [symbo('set', 'isSupersetOf')]: Set.prototype.isSupersetOf,
    [symbo('set', 'keys')]: Set.prototype.keys,
    [symbo('set', 'symmetricDifference')]: Set.prototype.symmetricDifference,
    [symbo('set', 'set')]: Set.prototype.set,
    [symbo('set', 'values')]: Set.prototype.values,
    [symbo('set', 'union')]: Set.prototype.union,

    [symbo('Buffer', 'prototype')]: (typeof Buffer !== 'undefined' ? Buffer : {})?.prototype, // eh.
    [symbo('buffer', 'constructor')]: Buffer.prototype.constructor,
    [symbo('Buffer', 'from')]: (typeof Buffer !== 'undefined' ? Buffer : {})?.from, // eh.
    [symbo('buffer', 'toString')]: (typeof Buffer !== 'undefined' ? Buffer : {})?.prototype.toString, // eh.
    [symbo('buffer', 'valueOf')]: (typeof Buffer !== 'undefined' ? Buffer : {})?.prototype.valueOf, // eh.

    [symbo('Uint8Array', 'prototype')]: Uint8Array.prototype,
    [symbo('Uint8Array', 'BYTES_PER_ELEMENT')]: Uint8Array.BYTES_PER_ELEMENT,
    [symbo('Uint8Array', 'fromBase64')]: Uint8Array.prototype.fromBase64,
    [symbo('Uint8Array', 'fromHex')]: Uint8Array.prototype.fromHex,
    [symbo('uint8Array', 'setFromBase64')]: Uint8Array.prototype.setFromBase64,
    [symbo('uint8Array', 'setFromHex')]: Uint8Array.prototype.setFromHex,
    [symbo('uint8Array', 'toBase64')]: Uint8Array.prototype.toBase64,
    [symbo('uint8Array', 'toHex')]: Uint8Array.prototype.toHex,

    [symbo('TextDecoder', 'prototype')]: TextDecoder.prototype,
    [symbo('textDecoder', 'decode')]: TextDecoder.prototype.decode,



    // Mmmmm
    //Function: function(...args){ return function(...args2){ $('Function() invoked! Function:', args, ', invoked with:', args2); } },
    // Sadly (ironic, I know) can't do the same to `eval` in strict mode
  };

  for (const key of Object.keys(builtinSymbolsMapper)) {
    if (builtinSymbolsMapper[key] === undefined && key !== 'undefined') {
      builtinSymbolsMapper[key] = () => {
        throw new Error(`Native platform did not support this function yet: ${key}`);
      };
    }
  }

  return builtinSymbolsMapper;
}
